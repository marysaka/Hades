/* automatically generated by rust-bindgen 0.63.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event_header {
    pub kind: i32,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_event_header() {
    const UNINIT: ::std::mem::MaybeUninit<event_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<event_header>(),
        16usize,
        concat!("Size of: ", stringify!(event_header))
    );
    assert_eq!(
        ::std::mem::align_of::<event_header>(),
        8usize,
        concat!("Alignment of ", stringify!(event_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event_header),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(event_header),
            "::",
            stringify!(size)
        )
    );
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum message_kind {
    MESSAGE_EXIT = 0,
    MESSAGE_RESET = 1,
    MESSAGE_RUN = 2,
    MESSAGE_PAUSE = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct message {
    pub header: event_header,
}
#[test]
fn bindgen_test_layout_message() {
    const UNINIT: ::std::mem::MaybeUninit<message> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<message>(),
        16usize,
        concat!("Size of: ", stringify!(message))
    );
    assert_eq!(
        ::std::mem::align_of::<message>(),
        8usize,
        concat!("Alignment of ", stringify!(message))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(message),
            "::",
            stringify!(header)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct message_reset {
    pub header: event_header,
    pub config: *mut gba_config,
}
#[test]
fn bindgen_test_layout_message_reset() {
    const UNINIT: ::std::mem::MaybeUninit<message_reset> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<message_reset>(),
        24usize,
        concat!("Size of: ", stringify!(message_reset))
    );
    assert_eq!(
        ::std::mem::align_of::<message_reset>(),
        8usize,
        concat!("Alignment of ", stringify!(message_reset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(message_reset),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(message_reset),
            "::",
            stringify!(config)
        )
    );
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum notification_kind {
    NOTIFICATION_RUN = 0,
    NOTIFICATION_PAUSE = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct notification {
    pub header: event_header,
}
#[test]
fn bindgen_test_layout_notification() {
    const UNINIT: ::std::mem::MaybeUninit<notification> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<notification>(),
        16usize,
        concat!("Size of: ", stringify!(notification))
    );
    assert_eq!(
        ::std::mem::align_of::<notification>(),
        8usize,
        concat!("Alignment of ", stringify!(notification))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(notification),
            "::",
            stringify!(header)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct channel {
    pub events: *mut event_header,
    pub length: usize,
    pub size: usize,
    pub allocated_size: usize,
    pub lock: pthread_mutex_t,
    pub ready: pthread_cond_t,
}
#[test]
fn bindgen_test_layout_channel() {
    const UNINIT: ::std::mem::MaybeUninit<channel> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<channel>(),
        144usize,
        concat!("Size of: ", stringify!(channel))
    );
    assert_eq!(
        ::std::mem::align_of::<channel>(),
        8usize,
        concat!("Alignment of ", stringify!(channel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).events) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(channel),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(channel),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(channel),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocated_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(channel),
            "::",
            stringify!(allocated_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(channel),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ready) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(channel),
            "::",
            stringify!(ready)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct channels {
    pub messages: channel,
    pub notifications: channel,
}
#[test]
fn bindgen_test_layout_channels() {
    const UNINIT: ::std::mem::MaybeUninit<channels> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<channels>(),
        288usize,
        concat!("Size of: ", stringify!(channels))
    );
    assert_eq!(
        ::std::mem::align_of::<channels>(),
        8usize,
        concat!("Alignment of ", stringify!(channels))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messages) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(channels),
            "::",
            stringify!(messages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notifications) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(channels),
            "::",
            stringify!(notifications)
        )
    );
}
extern "C" {
    pub fn channel_lock(channel: *mut channel);
}
extern "C" {
    pub fn channel_release(channel: *mut channel);
}
extern "C" {
    pub fn channel_push(channel: *mut channel, event: *const event_header);
}
extern "C" {
    pub fn channel_wait(channel: *mut channel);
}
extern "C" {
    pub fn channel_next(channel: *const channel, event: *const event_header)
        -> *const event_header;
}
extern "C" {
    pub fn channel_clear(channel: *mut channel);
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum gba_states {
    GBA_STATE_PAUSE = 0,
    GBA_STATE_RUN = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gba {
    pub exit: bool,
    pub state: gba_states,
    pub config: *mut gba_config,
    pub channels: channels,
}
#[test]
fn bindgen_test_layout_gba() {
    const UNINIT: ::std::mem::MaybeUninit<gba> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gba>(),
        304usize,
        concat!("Size of: ", stringify!(gba))
    );
    assert_eq!(
        ::std::mem::align_of::<gba>(),
        8usize,
        concat!("Alignment of ", stringify!(gba))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exit) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(gba), "::", stringify!(exit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gba),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gba),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gba),
            "::",
            stringify!(channels)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gba_config {
    pub rom: *mut ::std::os::raw::c_void,
    pub rom_size: usize,
}
#[test]
fn bindgen_test_layout_gba_config() {
    const UNINIT: ::std::mem::MaybeUninit<gba_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gba_config>(),
        16usize,
        concat!("Size of: ", stringify!(gba_config))
    );
    assert_eq!(
        ::std::mem::align_of::<gba_config>(),
        8usize,
        concat!("Alignment of ", stringify!(gba_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rom) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gba_config),
            "::",
            stringify!(rom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rom_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gba_config),
            "::",
            stringify!(rom_size)
        )
    );
}
extern "C" {
    pub fn gba_init();
}
extern "C" {
    pub fn gba_create() -> *mut gba;
}
extern "C" {
    pub fn gba_run(gba: *mut gba);
}
extern "C" {
    pub fn gba_delete(gba: *mut gba);
}
